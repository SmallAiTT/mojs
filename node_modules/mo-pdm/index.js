var fs = require('fs');
var path = require("path");
var parseXml = require('xml-parser');
var moUtils = require("mo-utils");


function getPackages(xmlObj){
    var children = xmlObj.root.children[0].children[0].children[0].children;
    for(var i = 0, li = children.length; i < li; i++){
        var child = children[i];
        if(child.name == "c:Packages") return child.children;
    }
    return null;
}

function getTables(xmlObj){
    var packages = getPackages(xmlObj);
    if(!packages) return [];
    var tables = [];
    for(var i = 0, li = packages.length; i < li; i++){
        var pack = packages[i];
        var packChildren = pack.children;
        var ts = null;
        for(var j = 0, lj = packChildren.length; j < lj; j++){
            var child = packChildren[j];
            if(child.name == "c:Tables"){
                ts = child.children;
                break;
            }
        }
        for(var j = 0, lj = ts.length; j < lj; j++){
            tables.push(ts[j]);
        }
    }
    return tables;
}
var tableChildHandlerMap = {};
tableChildHandlerMap["Columns"] = function(columnsObj){
    var cols = [];
    var children = columnsObj.children;
    for(var i = 0, li = children.length; i < li; i++){
        var itemi = children[i];
        var col = {};
        var colChildren = itemi.children;
        for(var j = 0, lj = colChildren.length; j < lj; j++){
            var itemj = colChildren[j];
            var name = itemj.name.split(':')[1];
            col[name] = itemj.content;
        }
        cols.push(col);
    }
    return cols;
};
/**
 * 根据pdm路径，获取到数据库表结构信息。
 * @param pdmPath
 */
exports.getTables = function(pdmPath){
    var pdmContent = fs.readFileSync(pdmPath, 'utf8');
    pdmContent = pdmContent.replace(/<\?PowerDesigner [^(?>)]*\?>/, '');
    var pdmObj = parseXml(pdmContent);
    var ts = getTables(pdmObj);
    var tables = [];
    for(var i = 0, li = ts.length; i < li; i++){
        var t = ts[i];
        var table = {};
        table.attributes = t.attributes;
        var children = t.children;
        for(var j = 0, lj = children.length; j < lj; j++){
            var child = children[j];
            var name = child.name;
            name = name.split(':')[1];
            if(tableChildHandlerMap[name]) table[name] = tableChildHandlerMap[name](child);
            else table[name] = child.content;
            tables.push(table);
        }
    }
    return tables;
};


function getViews(xmlObj){
    var packages = getPackages(xmlObj);
    if(!packages) return [];
    var views = [];
    for(var i = 0, li = packages.length; i < li; i++){
        var pack = packages[i];
        var packChildren = pack.children;
        var ts = null;
        for(var j = 0, lj = packChildren.length; j < lj; j++){
            var child = packChildren[j];
            if(child.name == "c:Views"){
                ts = child.children;
                break;
            }
        }
        for(var j = 0, lj = ts.length; j < lj; j++){
            views.push(ts[j]);
        }
    }
    return views;
}
var viewChildHandlerMap = {};
viewChildHandlerMap["Columns"] = function(columnsObj){
    var cols = [];
    var children = columnsObj.children;
    for(var i = 0, li = children.length; i < li; i++){
        var itemi = children[i];
        var col = {};
        var colChildren = itemi.children;
        for(var j = 0, lj = colChildren.length; j < lj; j++){
            var itemj = colChildren[j];
            var name = itemj.name.split(':')[1];
            col[name] = itemj.content;
        }
        cols.push(col);
    }
    return cols;
};
/**
 * 根据pdm路径，获取到数据库视图结构信息。
 * @param pdmPath
 */
exports.getViews = function(pdmPath){
    var pdmContent = fs.readFileSync(pdmPath, 'utf8');
    pdmContent = pdmContent.replace(/<\?PowerDesigner [^(?>)]*\?>/, '');
    var pdmObj = parseXml(pdmContent);
    var vs = getViews(pdmObj);
    var views = [];
    for(var i = 0, li = vs.length; i < li; i++){
        var t = vs[i];
        var table = {};
        table.attributes = t.attributes;
        var children = t.children;
        for(var j = 0, lj = children.length; j < lj; j++){
            var child = children[j];
            var name = child.name;
            name = name.split(':')[1];
            if(tableChildHandlerMap[name]) table[name] = tableChildHandlerMap[name](child);
            else table[name] = child.content;
            views.push(table);
        }
    }
    return views;
};
//fs.writeFileSync("test.json", JSON.stringify(exports.getTables("test.xml"), null, 2));

function getDefaultValue(col){
    var defaultValue = col.DefaultValue;
    if(defaultValue == null) return "null";
    if(defaultValue.match(/(^\d+$)|(^\d+.\d*$)/)){
        return defaultValue;
    }else{
        try{
            JSON.parse(defaultValue);
            return defaultValue;
        }catch(e){
            return "'" + defaultValue + "'";
        }
    }
}
function genEntityFile(outputDir, obj, content){
    var entityName = obj.Name;
    var results = entityName.match(/\([\d\w]+\)/);
    if(!results){
        console.error("为配置Entity名称，请检查！");
    }else{
        entityName = results[0].substring(1, results[0].length - 1);
        fs.writeFileSync(path.join(outputDir, entityName + ".js"), content);
    }
}
exports.genEntities = function(pdmPath, outputDir){
    moUtils.mkdirSync(outputDir);
    var tables = exports.getTables(pdmPath);
    var tableTempStr = "/**\r\n${name}\r\n${comment}\r\n**/\r\nvar _Class = module.exports = function(){\r\n${cols}\r\n};\r\n_Class.tableName = '${code}';";
    var colTempStr = "    /** ${name} **/\r\n    this.${code} = ${value};/*${comment}*/\r\n";
    for(var i = 0, li = tables.length; i < li; i++){
        var table = tables[i];
        var cols = table.Columns;
        var colsStr = "";
        for(var j = 0, lj = cols.length; j < lj; j++){
            var col = cols[j];
            colsStr += moUtils.formatPlaceholder(colTempStr, {name:col.Name, code:col.Code, value:getDefaultValue(col), comment:col.Comment||""});
        }
        var content = moUtils.formatPlaceholder(tableTempStr, {name:table.Name, code : table.Code, comment:table.Comment||"", cols:colsStr})

        genEntityFile(outputDir, table, content);
    }
    var views = exports.getViews(pdmPath);
    for(var i = 0, li = views.length; i < li; i++){
        var view = views[i];
        var cols = view.Columns;
        var colsStr = "";
        for(var j = 0, lj = cols.length; j < lj; j++){
            var col = cols[j];
            colsStr += moUtils.formatPlaceholder(colTempStr, {name:col.Name, code:col.Code, value:getDefaultValue(col), comment:col.Comment||""});
        }
        var content = moUtils.formatPlaceholder(tableTempStr, {name:view.Name, code : view.Code, comment:view.Comment||"", cols:colsStr})
        genEntityFile(outputDir, view, content);
    }
};
//exports.genEntities("test.xml", "entity");