/**
 * Created by SmallAiTT on 2015/3/11.
 */
exports.handle = function(uiData, uiKey){
    //首先，去掉designWidth和designHeight两个字段。
    delete uiData[uiKey.designWidth];
    delete uiData[uiKey.designHeight];
    //再去掉dataScale字段
    delete uiData[uiKey.dataScale];
    //最后解析widgetTree
    handleWidgetData(uiData[uiKey.widgetTree], uiKey);
    return uiData;
};

function handleWidgetData(data, uiKey){
    var className = data[uiKey.className];
    var dvMap = getDefaultValueMap(uiKey, className);
    for (var k in data) {
        var v = data[k];
        if(v == null) {//无值就删除
            delete data[k];
            continue;
        }
        //压缩boolean值
        if(v === false) v = data[k] = 0;
        else if(v === true) v = data[k] = 1;

        if(k == uiKey.children){//如果是子节点列表
            for (var i = 0, l_i = v.length; i < l_i; i++) {
                var child = v[i];
                handleWidgetData(child, uiKey);
            }
        }else{
            var dv = dvMap[k];//获取默认值
            if(dv != null){//存在默认值
                if(dv instanceof Array && v instanceof Array && v.length == dv.length){
                    var flag = true;
                    for (var i = 0, l_i = dv.length; i < l_i; i++) {
                        if(dv[i] != v[i]){
                            flag = false;
                            break;
                        }
                    }
                    if(flag){//数组内容相同
                        delete data[k];
                    }
                }else if(v == dv){//如果等于默认值
                    delete data[k];
                }
            }
        }
    }
}

function getDefaultValueMap(uiKey, className){
    var dvMap = getWidgetDVMap(uiKey);
    switch(className){
        case "UIButton":
            getUIButtonDVMap(dvMap, uiKey);
            break;
        case "UIImage":
            getUIImageDVMap(dvMap, uiKey);
            break;
        case "UIInput":
            getUIInputDVMap(dvMap, uiKey);
            break;
        case "UIListView":
            getUIListViewDVMap(dvMap, uiKey);
            break;
        case "UILoadingBar":
            getUILoadingBarDVMap(dvMap, uiKey);
            break;
        case "UIPageView":
            getUIPageViewDVMap(dvMap, uiKey);
            break;
        case "UIPanel":
            getUIPanelDVMap(dvMap, uiKey);
            break;
        case "UIScrollView":
            getUIScrollViewDVMap(dvMap, uiKey);
            break;
        case "UIText":
            getUITextDVMap(dvMap, uiKey);
            break;
        case "UITextAtlas":
            getUITextAtlasDVMap(dvMap, uiKey);
            break;
        case "UITextBMFont":
            getUITextBMFontDVMap(dvMap, uiKey);
            break;
    }
    return dvMap;
}

function getWidgetDVMap(uiKey){
    var dvMap = {};
    dvMap[uiKey.x] = 0;
    dvMap[uiKey.y] = 0;
    dvMap[uiKey.width] = 0;
    dvMap[uiKey.height] = 0;
    dvMap[uiKey.anchorX] = 0.5;
    dvMap[uiKey.anchorY] = 0.5;
    dvMap[uiKey.posType] = 0;
    dvMap[uiKey.posPercentX] = 0;
    dvMap[uiKey.posPercentY] = 0;
    dvMap[uiKey.sizeType] = 0;
    dvMap[uiKey.sizePercentX] = 0;
    dvMap[uiKey.sizePercentY] = 0;
    dvMap[uiKey.zOrder] = 0;
    dvMap[uiKey.color] = 0;
    dvMap[uiKey.flipX] = 0;
    dvMap[uiKey.flipY] = 0;
    dvMap[uiKey.opacity] = 255;
    dvMap[uiKey.rotation] = 0;
    dvMap[uiKey.scaleX] = 1;
    dvMap[uiKey.scaleY] = 1;
    dvMap[uiKey.scale9Enabled] = 0;
    dvMap[uiKey.touchEnabled] = 0;
    dvMap[uiKey.visible] = 1;
    return dvMap;
}
function getUIScale9Data(dvMap, uiKey){
    dvMap[uiKey.scale9Enabled] = 20;
    dvMap[uiKey.scale9Grid] = [0,0,1,1];
    return dvMap;
}
function getUIButtonDVMap(dvMap, uiKey){
    getUIScale9Data(dvMap, uiKey);
    dvMap[uiKey.text] = "";
    dvMap[uiKey.textColor] = 0;
    dvMap[uiKey.fontSize] = 20;
    dvMap[uiKey.fontName] = "微软雅黑";
    return dvMap;
}
function getUIImageDVMap(dvMap, uiKey){
    getUIScale9Data(dvMap, uiKey);
    return dvMap;
}
function getUIInputDVMap(dvMap, uiKey){
    getUITextDVMap(dvMap, uiKey);
    dvMap[uiKey.passwordEnable] = 0;
    return dvMap;
}
function getUIListViewDVMap(dvMap, uiKey){
    getUIScrollViewDVMap(dvMap, uiKey);
    dvMap[uiKey.gravity] = 3;
    dvMap[uiKey.itemMargin] = 0;
    return dvMap;
}
function getUILoadingBarDVMap(dvMap, uiKey){
    getUIScale9Data(dvMap, uiKey);
    dvMap[uiKey.direction] = 0;
    dvMap[uiKey.percent] = 100;
    return dvMap;
}
function getUIPageViewDVMap(dvMap, uiKey){
    getUIPanelDVMap(dvMap, uiKey);
    return dvMap;
}
function getUIPanelDVMap(dvMap, uiKey){
    getUIScale9Data(dvMap, uiKey);
    dvMap[uiKey.adaptScreen] = 0;
    dvMap[uiKey.bgColor] = 0xffffff;
    dvMap[uiKey.bgOpacity] = 255;
    dvMap[uiKey.clippingEnabled] = 0;
    dvMap[uiKey.layoutType] = 0;
    dvMap[uiKey.vectorX] = 0;
    dvMap[uiKey.vectorY] = 0;
    dvMap[uiKey.anchorX] = 0;
    dvMap[uiKey.anchorY] = 0;
    return dvMap;
}
function getUIScrollViewDVMap(dvMap, uiKey){
    getUIPanelDVMap(dvMap, uiKey);
    dvMap[uiKey.direction] = 1;
    dvMap[uiKey.innerWidth] = 200;
    dvMap[uiKey.innerHeight] = 200;
    return dvMap;
}
function getUITextDVMap(dvMap, uiKey){
    dvMap[uiKey.fontName] = "微软雅黑";
    dvMap[uiKey.fontSize] = 32;
    dvMap[uiKey.text] = "";
    dvMap[uiKey.areaHeight] = 0;
    dvMap[uiKey.areaWidth] = 0;
    dvMap[uiKey.hAlignment] = 0;
    dvMap[uiKey.vAlignment] = 0;
    return dvMap;
}
function getUITextAtlasDVMap(dvMap, uiKey){
    getUITextDVMap(dvMap, uiKey);
    dvMap[uiKey.itemWidth] = 0;
    dvMap[uiKey.itemHeight] = 0;
    dvMap[uiKey.startCharMap] = "0";
    return dvMap;
}
function getUITextBMFontDVMap(dvMap, uiKey){
    return dvMap;
}
//var result = exports.handle(require("./example/uiHeroTrain.json"), require("./key.js"));
//var fs = require("fs");
//var path = require("path");
//fs.writeFileSync(path.join(__dirname, "example/uiHeroTrain_mini.json"), JSON.stringify(result, null, 4));
