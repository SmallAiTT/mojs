var fs = require("fs");
var path = require("path");
var moUtils = require("mo-utils");
var uiKey = require("./key");

exports.isScatterMode = false;//是否是散图模式，默认为false

var classNameMap = {
    "Label" : "UIText",
    "TextField" : "UIInput",
    "ImageView" : "UIImage",
    "Button" : "UIButton",
    "LabelAtlas" : "UITextAtlas",
    "LoadingBar" : "UILoadingBar",
    "Panel" : "UIPanel",
    "ScrollView" : "UIScrollView",
    "ListView" : "UIListView",
    "PageView" : "UIPageView"
};

function handleNum(obj){
    var content = JSON.stringify(obj, null, 0);
    content = content.replace(/"[^"]+"[ ]*:[ ]*[\-]?\d+\.\d{4,}/gi, function(value){
        var index = value.lastIndexOf(":");
        var num = parseFloat(value.substring(index+1));
        var num1 = Math.round(num*10000)/10000;
        var num2 = Math.round(num);
        if(num1 == num2){
            num = num2;
        }else{
            num = num1;
        }
//        console.log(value, "--->", value.substring(0, index+1) + num);
        return  value.substring(0, index+1) + num;
    });
    content = content.replace(/"egret_/gi, '"');
    return content;
}

exports.convert = function(jsonPath, outPath){
    var jsonData = require(jsonPath);
    var result = {};
    handleUIRoot(jsonData, result);
    fs.writeFileSync(outPath, handleNum(result));
};

function handleUIRoot(data, result){
    result[uiKey.designWidth] = data["designWidth"];
    result[uiKey.designHeight] = data["designHeight"];
    var textures = result[uiKey.textures] = [];
    result[uiKey.dataScale] = data["dataScale"];
    var widgetTree = result[uiKey.widgetTree] = convertWidgetData(data["widgetTree"], textures);
    trainsform(widgetTree, null);
    delPreview(widgetTree);
}

function delPreview(parent, lvl){
    lvl = lvl || 1;
    var children = parent.children ||[];
    for(var i = children.length - 1; i >= 0; --i){
        var child = children[i];
        var res = child[uiKey.res];
        if(res && res.indexOf("preview/") == 0){
            children.splice(i, 1);
        }else{
            delPreview(child, lvl+1);
        }
    }
}

function convertWidgetData(data, textures){
    var result = {};
    var options = data["options"];
    handleUIWidget(options, result, textures);
    switch (result[uiKey.className]){
        case "UIPanel":
            handleUIPanel(options, result, textures);
            break;
        case "UIScrollView":
            handleUIScrollView(options, result, textures);
            break;
        case "UIListView":
            handleUIListView(options, result, textures);
            break;
        case "UIPageView":
            handleUIPageView(options, result, textures);
            break;
        case "UIText":
            handleUIText(options, result, textures);
            break;
        case "UITextAtlas":
            handleUITextAtlas(options, result, textures);
            break;
        case "UIInput":
            handleUIInput(options, result, textures);
            break;
        case "UIImage":
            handleUIImage(options, result, textures);
            break;
        case "UIButton":
            handleUIButton(options, result, textures);
            break;
        case "UILoadingBar":
            handleUILoadingBar(options, result, textures);
            break;
    }
    var children = data["children"];
    if(children){
        var tempChildren = result[uiKey.children] = [];
        for(var i = 0; i < children.length; ++i){
            var childResult = convertWidgetData(children[i], textures);
            if(childResult) tempChildren.push(childResult);
        }
    }
    return result;
}

function handleUIWidget(data, result, textures){
    result[uiKey.className] = classNameMap[data["classname"]];
    result[uiKey.name] = data["name"];
    result[uiKey.x] = data["x"];
    result[uiKey.y] = data["y"];
    result[uiKey.width] = data["width"];
    result[uiKey.height] = data["height"];
    result[uiKey.anchorX] = data["anchorPointX"];
    result[uiKey.anchorY] = data["anchorPointY"];
    result[uiKey.posType] = data["positionType"];
    result[uiKey.posPercentX] = data["positionPercentX"];
    result[uiKey.posPercentY] = data["positionPercentY"];
    result[uiKey.sizeType] = data["sizeType"];
    result[uiKey.sizePercentX] = data["sizePercentX"];
    result[uiKey.sizePercentY] = data["sizePercentY"];
    result[uiKey.zOrder] = data["ZOrder"];
    result[uiKey.flipX] = data["flipX"];
    result[uiKey.flipY] = data["flipY"];
    result[uiKey.opacity] = data["opacity"];
    result[uiKey.rotation] = data["rotation"];
    result[uiKey.scaleX] = data["scaleX"];
    result[uiKey.scaleY] = data["scaleY"];
    result[uiKey.touchEnabled] = data["touchAble"];
    result[uiKey.visible] = data["visible"];
    var layoutParameter = data["layoutParameter"];
    if(layoutParameter){//TODO
        var tempParam = result[uiKey.layoutParameter] = {};
        handleLayoutParameter(layoutParameter, tempParam);
    }
    result[uiKey.color] = data["colorR"] << 16 | data["colorG"] << 8 | data["colorB"];

}
var gravityMap = {
    0:0,
    1:1,
    2:4,
    3:3,
    4:6,
    5:5,
    6:2
};
function handleLayoutParameter(data, result){
    result[uiKey.type] = data["type"];
    result[uiKey.align] = data["align"];
    result[uiKey.gravity] = gravityMap[data["gravity"]];
    result[uiKey.normalHorizontal] = data["layoutNormalHorizontal"];
    result[uiKey.normalVertical] = data["layoutNormalVertical"];
    result[uiKey.parentHorizontal] = data["layoutParentHorizontal"];
    result[uiKey.parentVertical] = data["layoutParentVertical"];
    result[uiKey.margin] = [data["marginTop"], data["marginRight"], data["marginDown"], data["marginLeft"]];
}
function handleUIPanel(data, result, textures){
    result[uiKey.adaptScreen] = data["adaptScreen"];
    result[uiKey.bgColor] = data["bgColorR"] << 16 | data["bgColorG"] << 8 | data["bgColorB"];
    result[uiKey.bgOpacity] = data["bgColorOpacity"];
    result[uiKey.clippingEnabled] = data["clipAble"];
    result[uiKey.layoutType] = data["layoutType"];
    result[uiKey.vectorX] = data["vectorX"];
    result[uiKey.vectorY] = data["vectorY"];
    if(data["backGroundImageData"]) {
        var resPath = handleResPath(data["backGroundImageData"]["path"], textures);
        if(resPath) result[uiKey.res] = resPath;
    }
    if(data["colorType"] == 0) result[uiKey.bgOpacity] = 0;
    result[uiKey.scale9Enabled] = data["backGroundScale9Enable"];
    if(result[uiKey.scale9Enabled]) result[uiKey.scale9Grid] = [data["capInsetsX"], data["capInsetsY"], data["capInsetsWidth"], data["capInsetsHeight"]];
}

function handleUIScrollView(data, result, textures){
    handleUIPanel(data, result, textures);
    result[uiKey.direction] = data["direction"];
    result[uiKey.innerWidth] = data["innerWidth"];
    result[uiKey.innerHeight] = data["innerHeight"];
}

function handleUIListView(data, result, textures){
    handleUIScrollView(data, result, textures);
    result[uiKey.gravity] = data["gravity"];
    result[uiKey.itemMargin] = data["itemMargin"];
}

function handleUIPageView(data, result, textures){
    handleUIPanel(data, result, textures);
}

function handleUIText(data, result, textures){
    result[uiKey.fontName] = data["fontName"];
    result[uiKey.fontSize] = data["fontSize"];
    result[uiKey.text] = data["text"];
    result[uiKey.areaHeight] = data["areaHeight"];
    result[uiKey.areaWidth] = data["areaWidth"];
    result[uiKey.hAlignment] = data["hAlignment"];
    result[uiKey.vAlignment] = data["vAlignment"];
}

function handleUITextAtlas(data, result, textures){
    handleUIText(data, result, textures);
    result[uiKey.itemWidth] = data["itemWidth"];
    result[uiKey.itemHeight] = data["itemHeight"];
    result[uiKey.startCharMap] = data["startCharMap"];
    result[uiKey.text] = data["stringValue"];
    if(data["charMapFileData"]){
        var resPath = handleResPath(data["charMapFileData"]["path"], textures);
        if(resPath) result[uiKey.res] = resPath;
    }
}

function handleUIInput(data, result, textures){
    handleUIText(data, result, textures);
    result[uiKey.passwordEnable] = data["passwordEnable"];
}

function handleUIImage(data, result, textures){
    result[uiKey.scale9Enabled] = data["scale9Enabled"];
    if(result[uiKey.scale9Enabled]) result[uiKey.scale9Grid] = [data["capInsetsX"], data["capInsetsY"], data["capInsetsWidth"], data["capInsetsHeight"]];
    if(data["fileNameData"]){
        var resPath = handleResPath(data["fileNameData"]["path"], textures);
        if(resPath) result[uiKey.res] = resPath;
    }
}

function handleUIButton(data, result, textures){
    var resPath;
    if(data["normalData"]) {
        resPath = handleResPath(data["normalData"]["path"], textures);
        if(resPath) result[uiKey.normal] = resPath;
    }
    if(data["pressedData"]) {
        resPath = handleResPath(data["pressedData"]["path"], textures);
        if(resPath) result[uiKey.pressed] = resPath;
    }
    if(data["disabledData"]) {
        resPath = handleResPath(data["disabledData"]["path"], textures);
        if(resPath) result[uiKey.disabled] = resPath;
    }
    result[uiKey.text] = data["text"];
    result[uiKey.textColor] = data["textColorR"] << 16 | data["textColorG"] << 8 | data["textColorB"];
    result[uiKey.fontSize] = data["fontSize"];
    result[uiKey.fontName] = data["fontName"];
}

function handleUILoadingBar(data, result, textures){
    var resPath;
    if(data["textureData"]) {
        resPath = handleResPath(data["textureData"]["path"], textures);
        if(resPath) result[uiKey.res] = resPath;
    }
}


function trainsform(widgetData, parent){
    if(parent) {
        var pW = parent[uiKey.width] || 0;
        var pH = parent[uiKey.height] || 0;
        var h = widgetData[uiKey.height] || 0;
        var sY = widgetData[uiKey.scaleY];
        var y = widgetData[uiKey.y] || 0;
        var pax = parent[uiKey.anchorX] || 0;
        var pay = parent[uiKey.anchorY] || 0;
        var ay = widgetData[uiKey.anchorY] || 0;
        widgetData[uiKey.y] = pH * (1 - pay) - y;
        widgetData[uiKey.x] += pW * pax;
        if(widgetData[uiKey.posType] == 1){//percent
            widgetData[uiKey.posPercentX] = pax + widgetData[uiKey.posPercentX];
            widgetData[uiKey.posPercentY] = 1 - pay - widgetData[uiKey.posPercentY];
        }
    }
    var children = widgetData[uiKey.children];
    if(children){
        for(var i = 0; i < children.length; ++i){
            trainsform(children[i], widgetData);
        }
    }
    if(parent) widgetData[uiKey.anchorY] = 1 - widgetData[uiKey.anchorY];//反过来
}

var ignoreArr = ["preview"];
var scatteredArr = ["ui_bg", "ui_num",  "preview"];
function handleResPath(filePath, textures){
    if(!filePath) return null;
    var index = filePath.indexOf("/");
    if(index <=0) {
        if(textures.indexOf(filePath) < 0) textures.push(filePath);
        return filePath;
    }
    var pre = filePath.substring(0, index);
    if(!exports.isScatterMode && scatteredArr.indexOf(pre) < 0){
        filePath = pre + "#" + filePath.substring(index+1);
        var sheet = pre+".sheet";
        if(textures.indexOf(sheet) < 0) textures.push(sheet);
    }else if(textures.indexOf(filePath) < 0 && filePath.indexOf("preview/") != 0) textures.push(filePath);
    return filePath;
}

exports.convertByDir = function(srcDir, dstDir){
    var files = fs.readdirSync(srcDir);
    moUtils.mkdirSync(dstDir);
    for(var i = 0; i < files.length; ++i){
        var fileName = files[i];
        exports.convert(path.join(srcDir, fileName), path.join(dstDir, path.basename(fileName, ".json")+".ui"));
    }
};

//exports.convertByDir(path.join(__dirname, "example/ccui"), path.join(__dirname, "example/moui"));