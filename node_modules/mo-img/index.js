/**
 * Created with JetBrains WebStorm.
 * User: SmallAiTT
 * Date: 13-10-13
 * Time: 下午8:06
 * To change this template use File | Settings | File Templates.
 */

var fs = require("fs");
var path = require("path");
var async = require("async");
var moUtils = require("mo-utils");

var pluginsPath = path.join(__dirname, "plugins");
var pyDir = path.join(pluginsPath, "py");

exports.packedMap = {};//已经打过包的列表，避免重复打包。

/**
 * 进行图片压缩
 * @param options
 * @param cb
 */
exports.pngquant = function(options, cb){
    var args = Array.prototype.slice.call(arguments);
    args.splice(0, 0, path.join(pluginsPath, "pngquant/pngquant"));
    moUtils.cmd.apply(moUtils, args);
};

/**
 * 打包散图为一张大图和plist。注意，这里是调用了texturepacker的功能。破解版的打包处理的图片上会有文字。
 * @param assets
 * @param outDir
 * @param scale
 * @param name
 * @param cb
 */
exports.texturePacker = function(assets, outDir, scale, name, cb){
    name = name || path.basename(assets);
    var o_plist = path.join(outDir, name + ".plist");
    var o_png = path.join(outDir, name + ".png");
    moUtils.mkdirSync(outDir);
    moUtils.cmd("TexturePacker", assets, {"--scale" : scale, "--data" : o_plist, "--trim-mode" : "None", "--sheet" : o_png}, cb)
};

exports.packImg = function(assets, outDir, scale, name, tempDir, isWithDirName, cb){
    if(!fs.existsSync(assets) || !fs.statSync(assets).isDirectory()){
        console.warn("%s 不存在或者不是一个文件夹！", assets)
        return cb();
    }
    var assetsName = path.basename(assets);
    name = name || assetsName;
    var tempAssetsRoot = path.join(tempDir, assetsName);//在temp目录中以assets名字作为该asstes的根目录
    var scaleDirName = "scale_" + scale;
    scaleDirName = scaleDirName.length > 10 ? scaleDirName.substring(0, 10) : scaleDirName;
    var scaleDir = path.join(tempAssetsRoot, scaleDirName);

    exports.rmdirSync(scaleDir);//先进行清理工作
    //先将图片缩放到目录中
    exports.scaleImgs(assets, isWithDirName ? path.join(scaleDir, assetsName) : scaleDir, scale, function(err){
        if(err){
            console.error(err);
            return cb();
        }

        //接着进行打包
        exports.texturePacker(scaleDir, outDir, 1, name, function(err1){
            if(err1){
                console.error(err1);
                return cb();
            }

            var plistPath = path.join(outDir, name + ".plist");
            //重新打包
            exports.repack(plistPath, scaleDir, function(err2){
                if(err2){
                    console.error(err2);
                    return cb();
                }
                var frameNameMap = exports.getFrameNameMap(scaleDir);
                cb(null, frameNameMap);
            });
        });
    });
};

/**
 * 缩放图片。
 * @param srcPath
 * @param dstPath
 * @param scale
 * @param cb
 */
exports.scaleImg = function(srcPath, dstPath, scale, cb){
    scale = scale || 1;
    dstPath = moUtils.changeExtnameToLowerCase(dstPath);
    moUtils.py(path.join(pyDir, "scaleImg.py"), srcPath, dstPath, scale, cb);
}
/**
 * 缩放目录下的所以.png和.jpg文件到目标文件夹中。
 * @param srcDir
 * @param dstDir
 * @param scale
 * @param cb
 */
exports.scaleImgs = function(srcDir, dstDir, scale, cb){
    moUtils.mkdirSync(dstDir);
    moUtils.walkDirOneByOne(srcDir, [".png", ".jpg"], function(filePath, cb1){
        var destFilePath = path.join(dstDir, path.relative(srcDir, filePath));
        destFilePath = moUtils.changeExtnameToLowerCase(destFilePath);
        var subDstDir = path.dirname(destFilePath);
        moUtils.mkdirSync(subDstDir);
        moUtils.py(path.join(pyDir, "scaleImg.py"), filePath, destFilePath, scale, cb1);
    }, cb);
};

/**
 * 将图片缩放到同一个目录下。
 * @param srcDir
 * @param dstDir
 * @param scale
 * @param cb
 */
exports.scaleImgsToOneDir = function(srcDir, dstDir, scale, cb){
    moUtils.mkdirSync(dstDir);
    moUtils.walkDirOneByOne(srcDir, [".png", ".jpg"], function(filePath, cb1){
        var destFilePath = path.join(dstDir, path.basename(filePath));
        destFilePath = moUtils.changeExtnameToLowerCase(destFilePath);
        moUtils.py(path.join(pyDir, "scaleImg.py"), filePath, destFilePath, scale, cb1);
    }, cb);
}

/**
 * 根据plist文件以及散图所在路径进行重新打包
 * @param plist
 * @param imgDir
 * @param cb
 */
exports.repack = function(plist, imgDir, cb){
    //将plist中的图片路径后缀改为小写
    var plistContent = fs.readFileSync(plist).toString();
    plistContent = plistContent.replace(/.png/ig, ".png");
    plistContent = plistContent.replace(/.jpg/ig, ".jpg");
    fs.writeFileSync(plist, plistContent);
    var pyPath = path.join(pyDir, "repacker.py")
    moUtils.py(pyPath, plist, imgDir, cb);
};
/**
 * 重新打包目录下的所有plist对应的图片。
 * @param plistDir
 * @param imgDirRoot
 * @param cb
 */
exports.repackByDir = function(plistDir, imgDirRoot, cb){
    fs.readdir(plistDir, function(err, files){
        async.map(files, function(file, cb1){
            if(exports.isExtname(filePath, ".plist")){
                var extname = path.extname(file);
                var basename = path.basename(file, extname);
                var imgDir = path.join(imgDirRoot, basename);
                exports.repack(path.join(plistDir, file), imgDir, cb1)
            }else
                cb1();
        }, cb);
    });
}

/**
 * 打包图
 * @param imgDir
 * @param scale
 * @param outDir
 * @param outName
 * @param tempDir
 * @param cb
 */
exports.pack = function(imgDir, scale, outDir, outName, tempDir, cb){
    outName = outName || path.basename(imgDir);//获取cca工程名称
    scale = scale || 1;//缩放
    outDir = outDir || path.join(imgDir, "../output");
    tempDir = tempDir || path.join(imgDir, "../__temp");

    var __resourcesTempDir = path.join(tempDir, outName + "_scale_" + scale);
    var __resTempDir = path.join(__resourcesTempDir, outName);

    if(exports.packedMap[__resourcesTempDir]) return cb();//如果已经打包过了，就直接返回

    moUtils.mkdirSync(outDir);//创建发布目录
    moUtils.mkdirSync(tempDir);//创建临时目录
    moUtils.rmdirSync(__resourcesTempDir);
    moUtils.mkdirSync(__resTempDir);
    exports.scaleImgs(imgDir, __resTempDir, scale, function(err){
        if(err) return cb(err);
        exports.texturePacker(__resourcesTempDir, outDir, 1, outName, function(err){
            if(err) return cb(err);
            var plistPath = path.join(outDir, outName+".plist");
            exports.repack(plistPath, __resourcesTempDir, function(err){
                if(err) return cb(err);
                exports.packedMap[__resourcesTempDir] = true;
                cb();
            });
        });
    });
}