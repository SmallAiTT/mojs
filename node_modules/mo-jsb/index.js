var path = require("path");
var fs = require("fs");
var moUtils = require("mo-utils");

exports.PLATFORM_ANDROID = "proj.android";
exports.PLATFORM_IOS = "proj.ios";
exports.PLATFORM_WIN32 = "proj.win32/Debug.win32";

var g_option;//发布时的option
var g_clientPath;//客户端路径
var g_clientChannelPath;//客户端渠道路径
var g_clientManifest;//当前的客户端manifest内容
var g_serverChannelPath;//服务端渠道路径
var g_projectJson;//project.json的内容
var g_channel;//发布渠道
var g_platform;//发布平台
var g_resolutionDirName;//分辨率目录
var g_versionNum;//当前版本
var g_baseVersion;//基线版本号
var g_versionPreStr;//版本号前缀
var g_preManifestMap;//之前的版本manifest列表
var g_differenceManifest;//差异信息

var publishOption = {
    jsListGetter : function(clientPath, option){
        return [];
    }
};

function initGlobalInfo(projectRoot, option){
    g_option = option;
    g_channel = option.channel;
    g_platform = option.platform;
    g_clientPath = path.join(projectRoot, "Client");
    //首先获取到project.json的内容，这个是最基本的项目配置
    g_projectJson = require(path.join(g_clientPath, "project.json"));
    g_resolutionDirName = g_projectJson.resolution.dir;
    g_baseVersion = g_projectJson.version;
    g_clientChannelPath = path.join(g_clientPath, "channel", g_channel, g_platform, g_resolutionDirName);
    g_serverChannelPath = path.join(projectRoot, "game-server/http/public/", "channel", g_channel, g_platform, g_resolutionDirName)

    g_preManifestMap = {};
    g_versionPreStr = g_baseVersion.split(".");
    g_versionPreStr = g_versionPreStr[0] + "." + g_versionPreStr[1] + ".";
    var max = -1;
    moUtils.walkDirSync(g_clientChannelPath, ".manifest", function(filePath){
        var basename = path.basename(filePath, ".manifest");
        if(basename.indexOf(g_versionPreStr) == 0){
            max = Math.max(max, parseInt(basename.split(".")[2]));
            g_preManifestMap[basename] = JSON.parse(fs.readFileSync(filePath).toString());
        }
    });
    g_versionNum = max + 1;//当前版本

    var md5DirList = [
        "frameworks/js-bindings/bindings/script",
        "src",
        path.join("res", g_resolutionDirName), "res/audio", "res/shared"
    ];
    g_clientManifest = {};
    for(var i = 0, li = md5DirList.length; i < li; i++){
        getMD5ByDir(g_clientPath, md5DirList[i], g_clientManifest);
    }
    console.log(g_clientManifest);
}

function getMD5ByDir(clientPath, dir, md5Map){
    moUtils.walkDirSync(path.join(clientPath, dir), "*", function(filePath){
        var rfPath = path.relative(clientPath, filePath);
        var stat = fs.statSync(filePath);
        var size = stat.size;
        var md5 = moUtils.getMd5(filePath);
        md5Map[rfPath] = [size, md5];
    });
}

function moveDifference(differenceManifest){
    for (var path in moveDifference) {

    }
}



exports.publish = function(projectRoot, option, cb){
    initGlobalInfo(projectRoot, option);
    //获取到当前的md5 manifest信息
};
var projectRoot = path.join(__dirname, "../../../UnderWorld");
exports.publish(projectRoot, {
    channel : "9999",
    platform : exports.PLATFORM_ANDROID
}, function(err){
    if(err) console.error(err);
});