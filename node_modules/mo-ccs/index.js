var fs = require("fs");
var path = require("path");
var moUtils = require("mo-utils");
var moImg = require("mo-img");
var async = require('async');

var isToDelTemp = true;

var templateDir = path.join(__dirname, "template");

/**
 * 新建cca工程。
 * @param dir
 * @param ccaName
 */
exports.newCca = function(dir, ccaName){
    var projDir = path.join(dir, ccaName);
    if(fs.existsSync(projDir)) {
        console.warn("项目【%s】已经存在，不能重复创建！", projDir);
        return false;
    }
    moUtils.mkdirSync(projDir);
    moUtils.mkdirSync(path.join(projDir, "Json"));
    moUtils.mkdirSync(path.join(projDir, "Resources"));

    var ccaJsonStr = fs.readFileSync(path.join(templateDir, "cca.json")).toString();
    fs.writeFileSync(path.join(projDir, "Json", "cca.json"), ccaJsonStr);

    var ccaXmlAniStr = fs.readFileSync(path.join(templateDir, "cca.xml.animation")).toString();
    fs.writeFileSync(path.join(projDir, "cca.xml.animation"), ccaXmlAniStr);
    return true;
};
/**
 * 将cca重置成项目需要用的解构。
 * @param srcCcaPath
 * @param dstCcaPath
 */
exports.resetCca = function(srcCcaPath, dstCcaPath){
    moUtils.mkdirSync(dstCcaPath);
    moUtils.mkdirSync(path.join(dstCcaPath, "Json"));
    moUtils.mkdirSync(path.join(dstCcaPath, "Resources"));

    var jsonFiles = fs.readdirSync(path.join(srcCcaPath, "Json"));
    var jsonFile;
    for(var i = 0, li = jsonFiles.length; i < li; i++){
        var itemi = jsonFiles[i];
        var extname = path.extname(itemi);
        if(extname && extname.toLowerCase() == ".json") {
            jsonFile = itemi;
            break;
        }
    }
    var resPath = path.join(srcCcaPath, "Resources");
    var results = {};

    moUtils.walkDirSync(resPath, [".jpg", ".png"], function(filePath){
        var basename = path.basename(filePath).toLowerCase();
        if(results[basename]) console.warn("资源文件发生重名：【%s】", filePath);
        results[basename] = true;
        moUtils.copyFileSync(filePath, path.join(dstCcaPath, "Resources", basename));
    });

    var jsonPath = path.join(srcCcaPath, "Json", jsonFile);
    var jsonData = require(jsonPath);
    fs.writeFileSync(path.join(dstCcaPath, "Json/cca.json"), JSON.stringify(resetJsonData(jsonData)));

    var ccaXmlAniStr = fs.readFileSync(path.join(templateDir, "cca.xml.animation")).toString();
    fs.writeFileSync(path.join(dstCcaPath, "cca.xml.animation"), ccaXmlAniStr);
};

function resetJsonData(jsonData, ccaName){
    resetArmatureData(jsonData.armature_data[0], ccaName);
    resetAnimationData(jsonData.animation_data[0], ccaName);
    resetTextureData(jsonData.texture_data, ccaName);
    return jsonData;
}
function resetArmatureData(armatureData, ccaName){
    armatureData.name = ccaName || "cca";
    var boneData = armatureData.bone_data;
    if(!boneData) return;
    for(var i = 0, li = boneData.length; i < li; i++){
        var bd = boneData[i];
        if(!bd) continue;
        var displayData = bd.display_data;
        if(!displayData) continue;
        for(var j = 0, lj = displayData.length; j < lj; ++j){
            var dd = displayData[j];
            if(ccaName) dd.name = ccaName + "/" + dd.name;
            else dd.name = path.basename(dd.name);
        }
    }
}
function resetAnimationData(animationData, ccaName){
    animationData.name = ccaName || "cca";
}
function resetTextureData(textureData, ccaName){
    if(!textureData) return;
    for(var i = 0, li = textureData.length; i < li; i++){
        var itemi = textureData[i];
        if(ccaName) itemi.name = ccaName + "/" + itemi.name;
        else itemi.name = path.basename(itemi.name);
    }
}


/**
 * 发布单独的cca文件
 * @param ccaPath
 * @param scale
 * @param {{outDir:String, outName:String, uglifyJsonOpt:{JSON_KEY:Object, JSON_DEFAULT_VALUE:Object}}} opt
 * @param cb
 * @returns {*}
 */
exports.publishCca = function(ccaPath, scale, opt, cb){
    var ccaInnerFiles = fs.readdirSync(ccaPath);
    var isCca = false;
    for(var i = 0, li = ccaInnerFiles.length; i < li; i++){
        var itemi = ccaInnerFiles[i];
        if(itemi.match(/\.xml\.animation$/gi)) {
            isCca = true;
            break;
        }
    }
    if(!isCca) return cb();//不是cca
    var ccaName = path.basename(ccaPath);//获取cca工程名称
    scale = scale || 1;//缩放
    opt = opt || {};//选项
    var outDir = opt.outDir || path.join(ccaPath, "output");
    var outName = opt.outName || ccaName;//导出的名字
    var __tempDir = path.join(ccaPath, "__temp");
    moImg.pack(path.join(ccaPath, "Resources"), scale, outDir, outName, __tempDir, function(err){
        if(err) return cb(err);
        //导出json内容
        var jsonPath;
        moUtils.walkDirSync(path.join(ccaPath, "Json"), ".json", function(filePath){
            jsonPath = filePath;
        });
        var jsonData = resetJsonData(require(jsonPath), outName);
        jsonData.config_file_path = [outName + ".plist"];
        if(opt.uglifyJsonOpt) jsonData = moUtils.uglifyJson(jsonData, opt.uglifyJsonOpt);
        fs.writeFile(path.join(outDir, outName + ".exportjson"), JSON.stringify(jsonData, null, 0), function(err){
            if(err) return cb(err);
            //删除__temp目录
            if(isToDelTemp) moUtils.rmdirSync(__tempDir);
            cb();
        });

    });
}

//exports.publishCca(path.join(__dirname, "../../__test/monster_dashuyao"), 0.5, {outName : "ttt"});

function isPreviewNode(jsonData, delModules, scatterModules){
    if(jsonData.className == "LabelAtlas"){
        jsonData.options.fileNameData.resourceType = 0;
        return false;
    }else if(jsonData.classname == "ImageView") {
        var pathStr = jsonData.options.fileNameData.path;
        var module = pathStr.split("/")[0];
        if(delModules.indexOf(module) >= 0) return true;
        jsonData.options.fileNameData.resourceType = scatterModules.indexOf(module) >= 0 ? 0 : 1;
    }
    return false;
}

function delPreviewNode(parentNode, delModules, scatterModules){
    var children = parentNode.children || [];
    for(var i = 0; i < children.length;){
        var child = children[i];
        if(isPreviewNode(child, delModules, scatterModules)){
            children.splice(i, 1);
        }else{
            delPreviewNode(child, delModules, scatterModules);
            i++;
        }
    }
}

/**
 * 发布成单独的ccui的ExportJson文件
 * @param ccuiJsonPath
 * @param {{outDir:String, outName:String, ignoredTextures:Array, uglifyJsonOpt:{JSON_KEY:Object, JSON_DEFAULT_VALUE:Object}, delModules:Array, scatterModules:Array}} opt
 * @param cb
 * @returns {*}
 */
exports.publishCcuiJson = function(ccuiJsonPath, opt, cb){
    var ccuiName = path.basename(ccuiJsonPath);
    opt = opt || {};//选项
    opt.ignoredTextures = opt.ignoredTextures || [];
    opt.delModules = opt.delModules || [];
    opt.scatterModules = opt.scatterModules || [];
    var outDir = opt.outDir || path.join(path.join(ccuiJsonPath, "../../output"));
    var oName = opt.outName || ccuiName;//导出的名字

    moUtils.mkdirSync(outDir);

    var jsonData = require(ccuiJsonPath);
    var jsonStr = JSON.stringify(jsonData, null, 0);
    var result = jsonStr.match(/"path"[\s]*:[\s]*"[^\r\n"]+"/g);
    var texArr = [];
    if(result){
        for (var i = 0, li = result.length; i < li; i++) {
            var rStr = result[i];
            var str = rStr.match(/[^\r\n"]+\//);
            if(str){
                str = str[0].substring(0, str[0].length-1);
                var str = str.split("/")[0];
                if(opt.ignoredTextures.indexOf(str) < 0 && texArr.indexOf(str + ".plist") < 0){
                    texArr.push(str + ".plist")
                }
            }
        }
    }
    jsonData.textures = texArr;
    jsonStr = JSON.stringify(jsonData, null, 2);
    jsonStr = jsonStr.replace(/"useMergedTexture"[\s]*:[\s]*false/g, '"useMergedTexture": true');
    jsonStr = jsonStr.replace(/"resourceType"[\s]*:[\s]*0/g, '"resourceType": 1');

    //重新生成json对象
    jsonData = eval('(' + jsonStr + ')');
    delPreviewNode(jsonData.widgetTree, opt.delModules, opt.scatterModules);
    if(opt.uglifyJsonOpt) jsonData = moUtils.uglifyJson(jsonData, opt.uglifyJsonOpt);
    fs.writeFile(path.join(outDir, moUtils.changeExtname(oName, ".exportjson")), JSON.stringify(jsonData, null, 0), cb);
}
//exports.publishCcuiJson(path.join(__dirname, "../../__test/ccui/Json/uiHeroCard2.json"));

/**
 * 打包ccui中的模块图片资源城.plist和.png
 * @param ccuiImgModuleName
 * @param cfg
 * @param cb
 * @returns {*}
 */
exports.publishCcuiImg = function(ccuiDir, imgName, scale, opt, cb){
    scale = scale || 1;//缩放
    opt = opt || {};//选项
    var outDir = opt.outDir || path.join(ccuiDir, "output");
    var __tempDir = path.join(ccuiDir, "__temp");
    moImg.pack(path.join(ccuiDir, "Resources", imgName), scale, outDir, imgName, __tempDir, function(err){
        if(err) return cb(err);
        //删除__temp目录
        if(isToDelTemp) moUtils.rmdirSync(__tempDir);
        cb();
    });
}

//exports.publishCcuiImg(path.join(__dirname, "../../__test/ccui/"), "ui_common", 0.5, null);

/**
 * 发布ccui资源。
 * @param ccuiDir
 * @param scale
 * @param opt
 * @param cb
 */
exports.publishCcui = function(ccuiDir, scale, opt, cb){
    scale = scale || 1;//缩放
    opt = opt || {};//选项
    var outDir = opt.outDir || path.join(ccuiDir, "output");
    moUtils.walkDirOneByOne(path.join(ccuiDir, "Json"), ".json", function(filePath, cb1){
        var ccuiJsonOpt = {
            outDir : outDir,
            ignoredTextures : opt.ignoredTextures,
            uglifyJsonOpt : opt.uglifyJsonOpt
        };
        exports.publishCcuiJson(filePath, ccuiJsonOpt, cb1);
    }, function(err){
        if(err) return cb(err);
        var files = fs.readdirSync(path.join(ccuiDir, "Resources"));
        async.mapLimit(files, 1, function(imgName, cb1){
            var ccuiImgOpt = {
                outDir : outDir
            }
            exports.publishCcuiImg(ccuiDir, imgName, scale, ccuiImgOpt, cb1);
        }, cb);
    })
};
//exports.publishCcui(path.join(__dirname, "../../__test/ccui/"), 0.5);

exports.checkCcaRes = function(ccaPath, icoRequired){
    if(!fs.existsSync(path.join(ccaPath, "cca.xml.animation"))) return;//不是armature直接返回不校验
    //首先校验非法字符
    var json = require(path.join(ccaPath, "Json/cca.json"));
    var imgFileNameList = [];
    var unUsedImgs = [];

    var regExp = /^[a-zA-Z0-9_\-]+$/;
    var bone_data = json.armature_data[0].bone_data;
    if(bone_data){
        for(var i = 0; i < bone_data.length; ++i){
            var display_data = bone_data[i].display_data;
            if(!display_data) continue;
            for(var j = 0; j < display_data.length; ++j){
                var imgFile = display_data[j].name;
                imgFileNameList.push(imgFile.toLowerCase());
                var extname = path.extname(imgFile);
                if(!regExp.test(path.basename(imgFile, extname))){
                    console.warn("动画【%s】中的资源【%s】含有非法字符，请检查！", ccaPath, imgFile)
                }
            }
        }
    }
//    var texture_data = json.texture_data;
//    if(texture_data == null) {
//        for(var i = 0, li = texture_data.length; i < li; i++){
//            var itemi = texture_data[i];
//            imgFileNameList.push(itemi.name.toLowerCase());
//            if(!regExp.test(itemi.name)){
//                console.warn("动画【%s】中的资源【%s】含有非法字符，请检查！", ccaPath, itemi.name)
//            }
//        }
//    }

    //校验是否有jpg类型资源存在
    moUtils.walkDirSync(path.join(ccaPath, "Resources"), ".jpg", function(filePath){
        console.warn("动画【%s】中不能包含jpg类型的资源【%s】，请检查！", ccaPath, filePath)
    });

    //校验是否有多余的资源存在
    moUtils.walkDirSync(path.join(ccaPath, "Resources"), ".png", function(filePath){
        var basename = path.basename(filePath);
        if(imgFileNameList.indexOf(basename.toLowerCase()) < 0){
            unUsedImgs.push(filePath);
            console.warn("动画【%s】中有资源【%s】未被使用，请检查！", ccaPath, filePath)
        }
    });

    if(icoRequired && !fs.existsSync(path.join(ccaPath, "ico.png"))) console.warn("动画【%s】中必须包含一个ico.png图片，请检查！", ccaPath)
    return unUsedImgs;
};


/**
 * 根据规则获取对象数组
 * @param data
 * @param value
 * @param arr
 * @param index
 * @returns {*}
 */
function getTargetDataArr(data, arr, value, index){
    index = index || 0;
    if(typeof arr == "string"){
        arr = arr.split(".");
    }
    if(data instanceof Array){
        var resultArr = [];
        for (var i = 0, li = data.length; i < li; i++) {
            var tdArr = getTargetDataArr(data[i], arr, value, index);
            resultArr = resultArr.concat(tdArr);
        }
        return resultArr;
    }else {
        var key = arr[index];
        var tempData = data[key];
        if(!tempData) return [];
        if(arr.length - 1 > index){
            return getTargetDataArr(tempData, arr, value, index+1);
        }else
            return tempData == value ? [data] : [];
    }
};
var _typeNameMap = {
    "animation_data.mov_data.name" : "动作",
    "animation_data.mov_data.mov_bone_data.frame_data.evt" : "动作事件",
    "armature_data.bone_data.name" : "骨骼"
};
function checkCount(ccaPath, data, opt, preRoute){
    for (var route in opt) {
        var curOpt = opt[route];
        for (var targetValue in curOpt) {
            var cfg = curOpt[targetValue];
            if(targetValue.indexOf("|") > 0){//校验或
                var arr = targetValue.split("|");
                var flag = false;
                for(var i = 0, li = arr.length; i < li; i++){
                    var itemi = arr[i];
                    var targetArr = getTargetDataArr(data, route, itemi);
                    if(targetArr.length > 0){
                        if(!flag) flag = true;
                        handleCurOpt(ccaPath, data, route, itemi, cfg[itemi], preRoute);
                    }
                }
                var fullRoute = preRoute ? preRoute + "." + route : route;
                if(!flag) console.warn("动画【%s】中至少需要包含有【%s】【%s】一个，请检查！", ccaPath, _typeNameMap[fullRoute], targetValue);
            }else{
                handleCurOpt(ccaPath, data, route, targetValue, cfg, preRoute);
            }
        }
    }
}
function handleCurOpt(ccaPath, data, route, targetValue, cfg, preRoute){
    var fullRoute = preRoute ? preRoute + "." + route : route;
    var num = cfg.num || 1;
    var targetArr = getTargetDataArr(data, route, targetValue);
    var length = targetArr.length;
//    console.log("正在检查动画【%s】的【%s】的【%s】", ccaPath, fullRoute, targetValue);
    if((num == 1 || num == "1") && length != 1){
        return console.warn("动画【%s】中必须有且只能有一个【%s】：【%s】，但是现在为【%s】个！", ccaPath, _typeNameMap[fullRoute], targetValue, length);
    }else if(num == "+" && length <= 0){
        return console.warn("动画【%s】中必须至少有一个【%s】：【%s】，但是现在为【%s】个！", ccaPath, _typeNameMap[fullRoute], targetValue, length);
    }else if(num == "?" && (length != 0 && length != 1)){
        return console.warn("动画【%s】中最多不能大于一个【%s】：【%s】，但是现在为【%s】个！", ccaPath, _typeNameMap[fullRoute], targetValue, length);
    }
    var nextPreRoute = fullRoute.split(".");
    nextPreRoute.splice(nextPreRoute.length - 1, 1);
    nextPreRoute = nextPreRoute.join(".");
    var childrenMap = cfg.childrenMap;
    for(var i = 0, li = targetArr.length; i < li; i++){
        var itemi = targetArr[i];
        checkCount(ccaPath, itemi, childrenMap,  nextPreRoute)
    }
    return true;
}

exports.checkCcaData = function(ccaPath, opt){
    checkCount(ccaPath, require(path.join(ccaPath, "Json/cca.json")), opt);
};

exports.checkCca = function(ccaPath, icoRequired, opt){
    opt = opt || {};
    exports.checkCcaRes(ccaPath, icoRequired);
    exports.checkCcaData(ccaPath, opt);
}

var optMap = {
    "animation_data.mov_data.name" : {
        "normalAttack" : {
            num : 1,
            childrenMap : {
                "mov_bone_data.frame_data.evt" : {
                    "attackEvent|effectEvent" : {
                        attackEvent : {num : "+"},
                        effectEvent : {num : "?"}
                    }
                }
            }
        }
    }
}
var testCcaPath = path.join(__dirname, "../../__test/cca/02000");
//exports.checkCca(testCcaPath, true, optMap);
